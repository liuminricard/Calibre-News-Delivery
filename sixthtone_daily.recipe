from calibre.web.feeds.news import BasicNewsRecipe
from calibre.utils.date import parse_date

class SixthToneDaily(BasicNewsRecipe):
    title = 'Sixth Tone (Daily)'
    description = 'Fresh voices from today\'s China with daily updates and optimized images'
    language = 'en'
    __author__ = 'Sixth Tone'
    oldest_article = 1  # Only fetch from past day for daily delivery
    max_articles_per_feed = 30
    compress_news_images = True  # Enable image compression
    compress_news_images_auto_size = 10  # Size in KB above which to compress
    no_stylesheets = True
    remove_javascript = True
    use_embedded_content = True
    encoding = 'utf-8'
    auto_cleanup = True
    timeout = 30
    timefmt = '[%Y-%m-%d]'
    delay = 2
    
    feeds = [
        ('Daily Digest', 'https://www.sixthtone.com/rss'),
        ('News', 'https://www.sixthtone.com/rss/news'),
        ('Features', 'https://www.sixthtone.com/rss/features'),
        ('Culture', 'https://www.sixthtone.com/rss/culture')
    ]
    
    keep_only_tags = [
        dict(name='article'),
        dict(name='div', attrs={'class': 'article-content'})
    ]
    
    remove_tags = [
        dict(name='div', attrs={'class': 'article-share'}),
        dict(name='div', attrs={'class': 'article-tags'}),
        dict(name='div', attrs={'class': 'article-related'}),
        dict(name='div', attrs={'class': 'article-comments'}),
        dict(name='div', attrs={'class': 'subscribe-box'}),
        dict(name='div', attrs={'class': 'article-author'}),
        dict(name='aside'),
        dict(name='script'),
        dict(name='style'),
        dict(name='iframe'),
        dict(name='footer')
    ]
    
    extra_css = '''
        h1.article-title { 
            font-size: 1.8em; 
            margin-bottom: 0.5em;
            font-weight: bold;
        }
        .article-subtitle {
            font-size: 1.2em;
            color: #555;
            margin-bottom: 1.5em;
            font-style: italic;
        }
        .article-meta {
            color: #666;
            font-size: 0.9em;
            margin-bottom: 1.5em;
            border-bottom: 1px solid #eee;
            padding-bottom: 1em;
        }
        .article-content {
            font-family: Georgia, serif;
            font-size: 1.1em;
            line-height: 1.7;
        }
        .article-content p {
            margin: 1.2em 0;
        }
        .article-content img {
            max-width: 100%;
            height: auto;
            margin: 1em auto;
            display: block;
        }
        .article-content figcaption {
            font-size: 0.9em;
            color: #666;
            text-align: center;
            margin-top: 0.5em;
            margin-bottom: 1.5em;
        }
        .article-content h2 {
            font-size: 1.4em;
            margin: 1.8em 0 1em 0;
            font-weight: bold;
        }
        .article-content blockquote {
            border-left: 3px solid #ddd;
            padding-left: 1em;
            margin: 1.5em 0;
            color: #555;
            font-style: italic;
        }
        .article-divider {
            height: 1px;
            background: #eee;
            margin: 3em 0;
        }
    '''
    
    def preprocess_html(self, soup):
        # Reorganize article header
        header = soup.find('div', class_='article-header')
        if header:
            title = header.find('h1')
            subtitle = header.find('div', class_='article-subtitle')
            meta = header.find('div', class_='article-meta')
            
            article_content = soup.find('div', class_='article-content')
            if article_content:
                if title:
                    article_content.insert(0, title)
                if subtitle:
                    article_content.insert(1, subtitle)
                if meta:
                    article_content.insert(2, meta)
        
        # Handle Chinese names in bylines
        for meta in soup.find_all('div', class_='article-meta'):
            if 'By ' in meta.get_text():
                text = meta.get_text().replace('By ', '').strip()
                meta.string = 'By ' + text
        
        # Add divider between articles
        divider = soup.new_tag('div', attrs={'class': 'article-divider'})
        soup.append(divider)
        
        return soup
    
    def parse_feeds(self):
        feeds = BasicNewsRecipe.parse_feeds(self)
        for feed in feeds:
            for article in feed.articles:
                # Clean up dates
                if article.date:
                    article.date = parse_date(article.date)
                
                # Add category prefix to titles
                if '/news/' in article.url:
                    article.title = f"News: {article.title}"
                elif '/features/' in article.url:
                    article.title = f"Feature: {article.title}"
                elif '/culture/' in article.url:
                    article.title = f"Culture: {article.title}"
                
        return feeds
    
    def postprocess_html(self, soup, first_fetch):
        # Optimize images after compression
        for img in soup.find_all('img'):
            if 'src' in img.attrs:
                img['src'] = self.rewrite_url(img['src'])
                img['loading'] = 'lazy'
                # Preserve captions as alt text if needed
                if not img.get('alt') and img.find_parent('figure'):
                    figcaption = img.find_parent('figure').find('figcaption')
                    if figcaption:
                        img['alt'] = figcaption.get_text(strip=True)
        return soup
