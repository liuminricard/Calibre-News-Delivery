from calibre.web.feeds.news import BasicNewsRecipe
from calibre.utils.date import parse_date

class WaitButWhy(BasicNewsRecipe):
    title = 'Wait But Why'
    description = 'Long-form articles about everything from AI to aliens'
    language = 'en'
    __author__ = 'Tim Urban'
    oldest_article = 7  # days (articles are evergreen)
    max_articles_per_feed = 20  # fewer but longer articles
    no_stylesheets = True
    remove_javascript = True
    use_embedded_content = True
    encoding = 'utf-8'
    auto_cleanup = True
    timeout = 60  # longer timeout for image-heavy articles
    timefmt = '[%Y-%m-%d]'
    delay = 3  # seconds between downloads to be polite
    
    feeds = [
        ('All Posts', 'https://waitbutwhy.com/feed')
    ]
    
    keep_only_tags = [
        dict(name='article'),
        dict(name='div', attrs={'class': 'entry-content'}),
    ]
    
    remove_tags = [
        dict(name='div', attrs={'class': 'sharedaddy'}),
        dict(name='div', attrs={'class': 'jp-relatedposts'}),
        dict(name='div', attrs={'class': 'comments-area'}),
        dict(name='div', attrs={'class': 'post-meta'}),
        dict(name='nav', attrs={'class': 'post-navigation'}),
        dict(name='section', attrs={'class': 'author-bio'}),
        dict(name='div', attrs={'class': 'newsletter-signup'}),
        dict(name='script'),
        dict(name='style'),
        dict(name='iframe'),
        dict(name='form'),
    ]
    
    extra_css = '''
        h1.entry-title { 
            font-size: 2em; 
            margin-bottom: 0.5em;
            font-weight: bold;
            line-height: 1.2;
        }
        .entry-content { 
            font-family: Georgia, serif;
            font-size: 1.15em;
            line-height: 1.7;
        }
        .entry-content p { 
            margin: 1.3em 0;
        }
        .entry-content img {
            max-width: 100%;
            height: auto;
            margin: 1.5em auto;
            display: block;
        }
        .entry-content .wp-caption {
            margin: 2em 0;
            text-align: center;
            font-style: italic;
            font-size: 0.9em;
            color: #555;
        }
        .entry-content h2 {
            font-size: 1.6em;
            margin: 2em 0 1em 0;
            font-weight: bold;
        }
        .entry-content h3 {
            font-size: 1.4em;
            margin: 1.8em 0 0.8em 0;
            font-weight: bold;
        }
        .entry-content blockquote {
            font-style: italic;
            color: #555;
            margin: 2em;
            padding-left: 1em;
            border-left: 3px solid #ddd;
        }
        .entry-content ul, .entry-content ol {
            margin: 1.5em 0;
            padding-left: 2em;
        }
        .entry-content li {
            margin: 0.8em 0;
        }
        .article-divider {
            height: 1px;
            background: #eee;
            margin: 3em 0;
        }
        .hand-drawn {
            font-family: "Comic Sans MS", cursive, sans-serif;
        }
    '''
    
    def preprocess_html(self, soup):
        # Handle Tim Urban's signature hand-drawn images
        for img in soup.find_all('img'):
            if 'wait-but-why' in img.get('src', ''):
                if 'hand' in img.get('class', []) or 'doodle' in img.get('alt', '').lower():
                    img_wrapper = soup.new_tag('div', attrs={'class': 'hand-drawn'})
                    img.wrap(img_wrapper)
                    if img.get('alt'):
                        caption = soup.new_tag('div')
                        caption.string = img['alt']
                        img_wrapper.append(caption)
        
        # Handle embedded tweets (convert to simple links)
        for blockquote in soup.find_all('blockquote', class_='twitter-tweet'):
            link = blockquote.find('a', href=True)
            if link:
                p = soup.new_tag('p')
                a = soup.new_tag('a', href=link['href'])
                a.string = 'Twitter: ' + link['href']
                p.append(a)
                blockquote.replace_with(p)
        
        # Add divider between articles
        divider = soup.new_tag('div', attrs={'class': 'article-divider'})
        soup.append(divider)
        
        return soup
    
    def parse_feeds(self):
        feeds = BasicNewsRecipe.parse_feeds(self)
        for feed in feeds:
            for article in feed.articles:
                # Clean up dates
                if article.date:
                    article.date = parse_date(article.date)
                
                # Add "Part X" to titles if it's a multi-part series
                if 'Part' in article.title and ':' not in article.title:
                    article.title = article.title.replace('Part', ': Part')
                
        return feeds